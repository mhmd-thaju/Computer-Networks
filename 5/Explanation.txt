Let's walk through the code line by line, explaining each part in detail. I'll break it down into sections for each class, starting with the `Sender`, then `Receiver`, and finally the `Packet`.

### **Sender.java**

```java
public class Sender {
    private Receiver receiver;

    public Sender(Receiver receiver) {
        this.receiver = receiver;
    }
```
- **Line 1:** `public class Sender {`  
  Defines the `Sender` class, which will be responsible for creating and sending packets to the `Receiver`.
  
- **Line 2:** `private Receiver receiver;`  
  Declares a field `receiver` that will store a reference to the `Receiver` object. This is the entity that will receive the packets sent by the sender.

- **Line 4-6:** The constructor `public Sender(Receiver receiver)` initializes the `Receiver` object. When the `Sender` is created, it requires a `Receiver` object to send packets to.

```java
    public void sendPacket(String data) {
        // Create a packet (header + data + checksum)
        Packet packet = createPacket(data);
        // Send packet to receiver
        receiver.receive(packet);
    }
```
- **Line 8:** `public void sendPacket(String data) {`  
  Defines the `sendPacket` method. This method takes a `String data` as input, which is the data to be sent. It does not return anything (`void`).

- **Line 9:** `Packet packet = createPacket(data);`  
  Calls the `createPacket` method to generate a `Packet` containing the data, header, and checksum.

- **Line 10:** `receiver.receive(packet);`  
  Passes the created `Packet` to the `Receiver` by calling its `receive` method. The `Receiver` will process this packet.

```java
    private Packet createPacket(String data) {
        String header = createHeader();
        int checksum = computeChecksum(data);
        return new Packet(header, data, checksum);
    }
```
- **Line 12:** `private Packet createPacket(String data) {`  
  Defines a private method that creates and returns a `Packet`. This method is responsible for assembling the packet, including its header and checksum.

- **Line 13:** `String header = createHeader();`  
  Calls the `createHeader` method to generate the header of the packet. This can include information such as sequence numbers or types of data. In this case, it is a simple placeholder string.

- **Line 14:** `int checksum = computeChecksum(data);`  
  Calls the `computeChecksum` method to calculate a checksum for the given data. The checksum is used for error detection at the receiver's end.

- **Line 15:** `return new Packet(header, data, checksum);`  
  Constructs a new `Packet` object and returns it. This packet contains the header, data, and checksum.

```java
    private String createHeader() {
        // Simple header with sequence number (for demonstration)
        return "Header: Seq=0";
    }
```
- **Line 17-19:** The `createHeader` method creates a very basic header, just a string indicating the sequence number (set to 0). In a real protocol, this could include more detailed metadata, such as source, destination, or packet type.

```java
    private int computeChecksum(String data) {
        // Simple checksum (sum of ASCII values modulo 256)
        int sum = 0;
        for (char ch : data.toCharArray()) {
            sum += (int) ch;
        }
        return sum % 256;  // Checksum in range 0-255
    }
```
- **Line 21:** `private int computeChecksum(String data) {`  
  Defines a method to compute a simple checksum based on the sum of the ASCII values of the characters in the data.

- **Line 22-25:**  
  Loops through each character in the `data` string (`data.toCharArray()`) and adds its ASCII value (`(int) ch`) to a running total (`sum`).

- **Line 26:** `return sum % 256;`  
  Returns the checksum as the sum modulo 256. This ensures that the checksum value is between 0 and 255, which is sufficient for basic error detection.

```java
    public static void main(String[] args) {
        // Initialize the Receiver and Sender
        Receiver receiver = new Receiver();
        Sender sender = new Sender(receiver);

        // Example data to be sent
        String data = "Hello, world!";

        // Simulate sending packets continuously
        for (int i = 0; i < 5; i++) {
            sender.sendPacket(data);
            try {
                Thread.sleep(1000);  // Pause to simulate time between transmissions
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}
```
- **Line 28:** `public static void main(String[] args) {`  
  The entry point of the program. This method is responsible for setting up the sender-receiver relationship and simulating the transmission of data.

- **Line 30-32:**  
  Creates a `Receiver` object and passes it to the `Sender` constructor. This establishes the connection between the sender and receiver.

- **Line 34:** `String data = "Hello, world!";`  
  Defines a simple string message that will be sent repeatedly by the sender.

- **Line 37-41:**  
  A loop that runs 5 times. In each iteration, it calls the `sendPacket` method of the sender, which sends the same "Hello, world!" message to the receiver. It then waits for 1 second (`Thread.sleep(1000)`) to simulate the time between sending packets.

---

### **Receiver.java**

```java
public class Receiver {

    public void receive(Packet packet) {
        // Validate checksum of the packet
        if (!validateChecksum(packet)) {
            System.out.println("Packet discarded (checksum error).");
            return;
        }
        // Process valid data
        processData(packet.getData());
    }
```
- **Line 1:** `public class Receiver {`  
  Defines the `Receiver` class that will receive packets from the `Sender`.

- **Line 3:** `public void receive(Packet packet) {`  
  Defines the `receive` method that processes incoming `Packet` objects. It first validates the checksum and then processes the data if the checksum is valid.

- **Line 4-6:**  
  If the checksum is invalid (`!validateChecksum(packet)`), the packet is discarded, and a message is printed. The method then returns without further processing.

- **Line 7-9:**  
  If the checksum is valid, the `processData` method is called to process the data in the packet.

```java
    private boolean validateChecksum(Packet packet) {
        int expectedChecksum = packet.getChecksum();
        int calculatedChecksum = computeChecksum(packet.getData());
        return expectedChecksum == calculatedChecksum;
    }
```
- **Line 11:** `private boolean validateChecksum(Packet packet) {`  
  Defines a method to validate the checksum of a packet by comparing the checksum sent with the packet against the calculated checksum.

- **Line 12-14:**  
  The expected checksum is retrieved from the packet (`packet.getChecksum()`), and the checksum for the data is computed using `computeChecksum`. If they match, the method returns `true`; otherwise, it returns `false`.

```java
    private int computeChecksum(String data) {
        int sum = 0;
        for (char ch : data.toCharArray()) {
            sum += (int) ch;
        }
        return sum % 256;
    }
```
- **Line 16-19:**  
  A method to compute the checksum for a given string of data, similar to the one in the `Sender` class.

```java
    private void processData(String data) {
        System.out.println("Received data: " + data);
    }
}
```
- **Line 21-23:**  
  Defines the `processData` method that processes the data in the packet. In this simple implementation, it just prints the received data to the console.

---

### **Packet.java**

```java
public class Packet {
    private String header;
    private String data;
    private int checksum;

    public Packet(String header, String data, int checksum) {
        this.header = header;
        this.data = data;
        this.checksum = checksum;
    }

    public String getHeader() {
        return header;
    }

    public String getData() {
        return data;
    }

    public int getChecksum() {
        return checksum;
    }
}
```
- **Line 1:** `public class Packet {`  
  Defines the `Packet` class that represents a data packet containing the header, data, and checksum.

- **Line 2-4:**  
  Declares three fields: `header`, `data`, and `checksum`, which will store the corresponding parts of the packet.

- **Line 6-8:**  
  The constructor initializes the `header`, `data`, and `checksum` fields when a new `Packet` object is created.

- **Line 10-12:**  
  Getter methods for accessing the `header`, `data`, and `checksum` fields.

---

### Summary:

- **Sender:** Creates a packet with data, header, and checksum, and sends it to the receiver.
- **Receiver:** Receives a packet, validates its checksum, and processes the data if valid.
- **Packet:** A simple data structure to hold the packet's header, data, and checksum.

This is a simple example of a simplex communication protocol in Java where data flows in one direction, and the receiver does basic checksum validation.





Procedure

### **Procedure for the Unrestricted Simplex Protocol Program:**

1. **Create Classes:**
   - **Sender Class:** Defines the sender which will create and send packets of data.
   - **Receiver Class:** Defines the receiver which will receive and process the data sent by the sender.
   - **Packet Class:** Defines the packet structure, which holds the data being sent.

2. **Set Up Sender and Receiver:**
   - Create a `Receiver` object to receive the data.
   - Create a `Sender` object, passing the `Receiver` object as a parameter so the sender knows where to send data.

3. **Define Data:**
   - In the `Sender` class, define a sample data string (e.g., "Hello, world!").

4. **Send Data in a Loop:**
   - Use the `Sender` object to send the data multiple times (for example, 5 times) using the `sendPacket` method.
   - Each time the `sendPacket` method is called, a `Packet` object is created with the data and sent to the `Receiver`.

5. **Receiver Processes Data:**
   - The `Receiver` simply receives the `Packet`, extracts the data, and prints it to the console.
   - There is no checksum, acknowledgment, or error handling — the communication is one-way and unrestricted.

6. **Introduce Delay Between Sends:**
   - Use `Thread.sleep(1000)` to simulate a 1-second delay between sending each packet.

### **Procedure Steps:**
1. **Initialize Receiver and Sender Objects:**
   - Create an instance of `Receiver` and pass it to the `Sender` constructor.

2. **Simulate Data Transmission:**
   - In a loop, repeatedly call the `sendPacket` method of the `Sender` to send the data.

3. **Receive and Process Data:**
   - When the `Receiver` receives a packet, it processes the data by simply printing it to the console.

4. **Output Results:**
   - Observe the receiver printing the received data multiple times, as the sender continuously sends the same packet.

### **Expected Output:**
```
Received data: Hello, world!
Received data: Hello, world!
Received data: Hello, world!
Received data: Hello, world!
Received data: Hello, world!
```

This procedure outlines the steps to implement and test the unrestricted simplex protocol, where the sender continuously transmits data to the receiver without any acknowledgment or error handling.